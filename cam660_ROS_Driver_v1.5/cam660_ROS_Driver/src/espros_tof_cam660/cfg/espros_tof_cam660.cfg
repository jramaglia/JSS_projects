#!/usr/bin/env python

PACKAGE = "espros_tof_cam660"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


lens_type_enum = gen.enum([ gen.const("WideField", int_t, 0, "WideField"),
                             gen.const("StandardField",    int_t, 1, "StandardField"),
                             gen.const("NarrowField", int_t, 2, "NarrowField")],
                             "An enum to set lens type")


image_type_enum = gen.enum([ gen.const("Grayscale", int_t, 0, "Grayscale"),
                             gen.const("Distance",    int_t, 1, "Distance"),
                             gen.const("DistranceAmplitude", int_t, 2, "Distance&Amplitude"),
                             gen.const("DCS", int_t, 3, "DCS")],
                             "An enum to set image type")


frequence_modulation_enum = gen.enum([ gen.const("24MHz", int_t, 0, "24MHz"),
                                       gen.const("12MHz", int_t, 1, "12MHz"),
                                       gen.const("6MHz", int_t, 2, "6MHz"),
                                       gen.const("3MHz", int_t, 3, "3MHz"),
                                       gen.const("1_5MHz", int_t, 4, "1_5MHz"),
                                       gen.const("0_75MHz", int_t, 2, "0_75MHz")],
                                       "An enum to set modulation frequency")


channel_enum = gen.enum([ gen.const("0", int_t, 0, "0"),
                          gen.const("1", int_t, 1, "1"),
                          gen.const("2", int_t, 2, "2"),
                          gen.const("3", int_t, 3, "3"),
                          gen.const("4", int_t, 4, "4"),
                          gen.const("5", int_t, 5, "5"),
                          gen.const("6", int_t, 6, "6"),
                          gen.const("7", int_t, 7, "7"),
                          gen.const("8", int_t, 8, "8"),
                          gen.const("9", int_t, 9, "9"),
                          gen.const("10", int_t, 10, "10"),
                          gen.const("11", int_t, 11, "11"),
                          gen.const("12", int_t, 12, "12"),
                          gen.const("13", int_t, 13, "13"),
                          gen.const("14", int_t, 14, "14"),
                          gen.const("15", int_t, 15, "15")],
                          "An enum to set channel index")


######  Name                    Type   Reconfiguration level  Description     Default Min  Max
### Acquisition Control
gen.add("lens_type",            int_t,  0,  "Lens type", 0, 0, 2, edit_method=lens_type_enum)
gen.add("lens_center_offset_x", int_t,  0,  "Lens optical center offset X direction [pix]",  0, -50, 50)
gen.add("lens_center_offset_y", int_t,  0,  "Lens optical center offset Y direction [pix]",  0, -50, 50)
gen.add("image_type",           int_t,  0,  "Image type", 1, 0, 3, edit_method=image_type_enum)
gen.add("start_stream",         bool_t, 0,  "Start / Stop image acquisition",  True)
gen.add("integration_time_tof_1", int_t,  0,  "Integration time TOF1 [uS]",          50, 0, 4000)
gen.add("integration_time_tof_2", int_t,  0,  "Integration time TOF2 [uS]",         400, 0, 4000)
gen.add("integration_time_gray",  int_t,  0,  "Integration time Grayscale [uS]", 3000, 0, 100000)
gen.add("offset",                 int_t,  0,  "offset mm",                      0, -10000, 10000)
gen.add("min_amplitude",          int_t,  0,  "threshold minAmplitude LSB",       100, 0, 100000)
gen.add("frequency_modulation",   int_t,  0,  "Frequence modulation", 0, 0, 5, edit_method=frequence_modulation_enum)
gen.add("channel",                int_t,  0,  "Chanel", 0, 0, 15, edit_method=channel_enum)
gen.add("median_filter",          bool_t, 0,  "enable/disable median filter",  False)
gen.add("average_filter",         bool_t, 0,  "enable/disable average filter",  False)
gen.add("temporal_filter_factor", double_t,  0, "Temporal filter factor [0...1]",  0.0, 0, 1.0)
gen.add("temporal_filter_threshold", int_t,  0, "Temporal filter threshold [mm]",  0, 0, 10000)
gen.add("edge_filter_threshold",  int_t,  0,  "Edge filter threshold [mm]",  0, 0, 10000)
gen.add("temporal_edge_filter_threshold_low",  int_t, 0, "Temporal edge filter low threshold [mm]",  0, 0, 10000)
gen.add("temporal_edge_filter_threshold_high", int_t, 0, "Temporal edge filter high threshold [mm]", 0, 0, 10000)
gen.add("interference_detection_limit", int_t,  0,  "Interference detection limit [LSB]",  0, 0, 10000)
gen.add("use_last_value",     bool_t, 0,  "enable/disable interference detection useLastValue",  False)
gen.add("enable_cartesian",   bool_t, 0,  "Enable/disbale cartesian transformation",  True)
gen.add("enable_point_cloud", bool_t, 0,  "Publish point cloud data",  True)

exit(gen.generate(PACKAGE, "tof_cam660_node", "espros_tof_cam660"))

